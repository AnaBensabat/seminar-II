### Box and units  (use LJ units and periodic boundaries) ###
###################################################################
units		lj
atom_style 	sphere
boundary 	p p p

dimension 2
####################################################################


##### CREATE BOX AND ATOMS #########################################
# region box block 0 65 0 117 -0.5 0.5
region box block 0 15 0 15 -0.5 0.5
create_box    1 box
create_atoms 1 random 2 324523 box
velocity	all create 0.05 87287 dist gaussian
set type 1 mass   1.0

################# variables ########################################

variable T equal 0.05          
variable gamma equal 10.000    
variable timestep equal 0.005
variable Fa equal 10.0
variable s equal logfreq(1,9,10)
timestep 0.01

#####################################################################

#Soft pair interaction between all particles to push apart
########################################################################
pair_style soft      2.5
pair_modify	shift yes
pair_coeff      * * 20 1.12246152962189			
variable prefactor equal ramp(0,50)			
fix pushapart all adapt 1 pair soft a * * v_prefactor	
fix 1 all nve			
timestep 0.01
reset_timestep 0
run 100000					

unfix pushapart
unfix 1 
#####################################################

####### Verlet List ###################################
neighbor 1.0 bin
neigh_modify every 1 delay 1 check yes
######################################################


restart 1000000 dumb.restart




### calculate random direction (for autopropulsion) ##########################################################
# initialize a variable with random theta direction [0,2pi]
variable randomvect atom random(0,2*PI,12312)
# store it in a vector in order to not change its value when you call it again
fix theta0 all store/state 0 v_randomvect
# store a variable for the time evolution,
# which stores recursively its value in order to add a random number at each step
# (un po macchinoso ma si fa cosi)
variable deltatheta atom f_storedeltatheta+sqrt(6.*v_T/v_gamma)*sqrt(v_timestep)*normal(0,1,230)
fix storedeltatheta all store/state 1 v_deltatheta
# check fatto sul fatto che i normal si sommano come gaussiane e danno 1/sqrt(steps*2*3.14)*exp(-x**2/2/steps)
# abbiamo def theta in modo che la costante iniziale non sia aggiunta ogni volta, ma solo la parte random
variable theta atom f_theta0+v_deltatheta
# forza attiva
variable fxatt atom v_Fa*cos(v_theta)
variable fyatt atom v_Fa*sin(v_theta)
# variable modu atom sqrt(v_fxatt^2+v_fyatt^2)
##############################################################################################################
# pair style

pair_style mie/cut 1.0
pair_coeff 1 1 1.0 0.97857206208770 64 32
pair_modify shift yes



thermo 1000
fix 0 all nve
fix 2 all langevin $T $T $(1/v_gamma) 26559
fix 3 all setforce NULL NULL 0.0
fix 4 all addforce v_fxatt v_fyatt 0 


# computes

# 1 - MSD 
# compute  MSD   all msd
# variable msdxy equal c_MSD[1]+c_MSD[2]




#5 - log output and run
thermo_style custom step temp pe ke

#Dump trajectories
dump 1 all custom 1000 xyz.dump-ap.lammpstrj id x y z ix iy iz v_theta vx vy vz





# run parameters

timestep 0.001



run 80000000






